#!/bin/bash
# An init.d script for running a Node.js process as a service using Forever as
# the process monitor. For more configuration options associated with Forever,
# see: https://github.com/nodejitsu/forever
#
# Live:              This shell script takes care of starting and stopping the Kaltura kLive Controller service
#
# chkconfig: 2345 85 15
# description: Kaltura Live Controller

### BEGIN INIT INFO
# Provides:          kLiveController
# Required-Start:    $local_fs $remote_fs $network
# Required-Stop:     $local_fs $remote_fs $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# X-Interactive:     true
# Short-Description: Start/stop Kaltura Live Controller
### END INIT INFO

###
# extend callable functions from "functions" script
###
NAME=kLiveController
LOG_DIR=/var/log
PID_DIR=/var/run
USE_NVM="1"
KLIVE_CONTROLLER_PREFIX="/opt/kaltura/liveController/latest"
NODE_PATH="${KLIVE_CONTROLLER_PREFIX}/node_modules"
STATUS_FUNCTION=status

source /etc/rc.d/init.d/functions

if [ -r /etc/default/${NAME} ]; then
    echo ". /etc/default/${NAME}"
    . /etc/default/${NAME}
fi

if [ -r /etc/rc.d/init.d/functions ]; then
   echo ". source /etc/rc.d/init.d/functions"
   . /etc/rc.d/init.d/functions
elif [ -r /lib/lsb/init-functions ]; then
   echo ". /lib/lsb/init-functions"
   . /lib/lsb/init-functions
   STATUS_FUNCTION=status_of_proc
else
    echo "Error, no function found for checking if ${NAME} is running. either not running in CentOS/Ubuntu or wrong path"
fi

FOREVER="${NODE_PATH}/forever/bin/forever"
APPLICATION_PATH="${KLIVE_CONTROLLER_PREFIX}/lib/App.js"
MIN_UPTIME="5000"
SPIN_SLEEP_TIME="2000"
export PATH=$PATH:${NODE_PATH}/forever/bin
HOME=${HOME:-~}
LOG_DIR=${LOG_DIR}/liveController

loadNvm() {

    # Load nvm
    # usage of cd/pushd is required due to a bug in /root/.nvm/nvm.sh call to nvm_find_nvmrc()
    
    pushd ${KLIVE_CONTROLLER_PREFIX}
    [ -z "${NVM_DIR}" ] && NVM_DIR="${HOME}/.nvm"
    if [ -s "${NVM_DIR}/nvm.sh" ]; then
        source "${NVM_DIR}/nvm.sh"
        if [ -s ".nvmrc" ] ; then
            nvm use || nvm install
        else
            echo "no .nvmrc in ${KLIVE_CONTROLLER_PREFIX}, Exiting"
            exit 1
        fi
    else
        echo "nvm not found in ${NVM_DIR}, this is a must, Exiting!"
        exit 1
    fi
    popd
}

start() {
    echo "starting liveController..."
    [ -d ${LOG_DIR} ] || mkdir -p ${LOG_DIR}
    if [ "${USE_NVM}" = "1" ]; then
        loadNvm
    fi
    RETVAL=0
    for prefix in 0 1 ; do
        PIDFILE="${PID_DIR}/${NAME}_${prefix}.pid"
        LOGFILE="${LOG_DIR}/${NAME}_${prefix}-forever.log"
        check_pid_status "-p ${PIDFILE}"
        if [ $? -eq 0 ]; then
            echo "${NAME}_${prefix} already running"
        else
            echo "Starting ${NAME}_${prefix}"
            ${FOREVER} \
              --pidFile ${PIDFILE} \
              -a \
              -l ${LOGFILE} \
              --minUptime ${MIN_UPTIME} \
              --spinSleepTime ${SPIN_SLEEP_TIME} \
              start ${APPLICATION_PATH} prefix:${prefix}
            RETVAL=$(( ${RETVAL} + $? ))
        fi
    done
}

stop() {
    echo "stopping liveController..."
    if [ "${USE_NVM}" = "1" ]; then
        loadNvm
    fi
    RETVAL=0
    for prefix in 0 1 ; do
        PIDFILE="${PID_DIR}/${NAME}_${prefix}.pid"
        if [ -f ${PIDFILE} ]; then
            local __pid=$( cat ${PIDFILE} )
            echo "Shutting down ${NAME}_${prefix}"
            # Tell Forever to stop the process.
            ${FOREVER} stop ${__pid}
            check_pid_status "-p ${PIDFILE}"
            if [ $? -eq 0 ]; then
               RETVAL=$(( ${RETVAL} + $? ))
               echo "failed to stop ${NAME}_${prefix}, ${__pid}"
               killApp
               return ${RETVAL}
            else
               echo "${NAME}_${prefix}, ${__pid}, successfully stopped"
               rm -f $PIDFILE
            fi
        else
            echo "${NAME}_${prefix} is not running"
        fi
    done
}

restart() {
    stop
    start
}

###
# check whether process is running based on /proc/[pid]/exe
###
my_status() {
    RETVAL=0
    for prefix in 0 1 ; do
        PIDFILE="${PID_DIR}/${NAME}_${prefix}.pid"
        if [ -r ${PIDFILE} ]; then
            check_pid_status "-p ${PIDFILE}"
            if [ $? -ne 0 ]; then
                RETVAL=$?
                return ${RETVAL}
             fi
        else
             echo "${PIDFILE} is not readable. ${NAME} is not running."
        fi
    done
}

killApp() {
    echo "Aggressively kill all ${NAME} processes"
    pkill -f ${APPLICATION_PATH}
    echo "Remove all PID files"
    rm -f ${PID_DIR}/${NAME}*.pid
}

check_pid_status() {

    case ${STATUS_FUNCTION} in
        status)
            status $1
        ;;
        status_of_proc)
            status_of_proc $1 ${APPLICATION_PATH} node
        ;;
        *)
            echo "check_pid_status failed, status function '${STATUS_FUNCTION}' is unsupported"
        ;;
}

case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    status)
        my_status
        ;;
    restart)
        restart
        ;;
    *)
        echo "Usage: {start|stop|status|restart}"
        exit 1
        ;;
esac
exit ${RETVAL}
